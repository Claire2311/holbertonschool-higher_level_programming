Test for module 'matrix_divided'
=============================

Import the module
	>>> matrix_divided = __import__("2-matrix_divided").matrix_divided

Now use it:

Normal case
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 2)
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

Lists with not the same size
    >>> matrix_divided([[1, 2, 3], [4, 5, 6, 7]], 2)
	Traceback (most recent call last):
        	...
	TypeError: Each row of the matrix must have the same size

Lists with not only float or integer
    >>> matrix_divided([["test", 2, 3], [4, 5, 6, 7]], 2)
	Traceback (most recent call last):
        	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

Add with one missing argument
    >>> matrix_divided(2)
    100

Add a as integer and b as float
    >>> matrix_divided(100.3, -2)
    98

Error if b is not a float or integer
	>>> matrix_divided(4, "test")
	Traceback (most recent call last):
        	...
	TypeError: b must be an integer

Error if a is not a float or integer
	>>> matrix_divided("test", 4)
	Traceback (most recent call last):
        	...
	TypeError: a must be an integer

Error if a and b are not a float or integer
	>>> matrix_divided("test", "test")
	Traceback (most recent call last):
        	...
	TypeError: a must be an integer

Error if a and b are not a float or integer
	>>> matrix_divided("test", 1.3)
	Traceback (most recent call last):
        	...
	TypeError: a must be an integer

Error if a and b are not a float or integer
	>>> matrix_divided(1.3, "test")
	Traceback (most recent call last):
        	...
	TypeError: b must be an integer

Error if NaN
	>>> matrix_divided(float('NaN'))
	Traceback (most recent call last):
        	...
	ValueError: cannot convert float NaN to integer

Error if float overflow
	>>> matrix_divided(float('inf'))
	Traceback (most recent call last):
        	...
	OverflowError: cannot convert float infinity to integer